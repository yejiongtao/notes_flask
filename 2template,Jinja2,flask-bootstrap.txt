1. templates
	in the view function, you have to perform two tasks, namely the business logic and the presentation logic
		mixing the two tasks makes the code hard to understand and maintain
	use template to keep the text of a response, and render it in the view function
		which means replacing the variables with actual values and returning a final response string

2. Jinja2 template engine
	using templates
		put the html file in folder templates
			e.g., in file templates/user.html:
				<h1>Hello, {{ name }}!</h1>
		use them 
			from flask import Flask, render_template
			# ...

			@app.route('/user/<name>')
			def user(name):
			    return render_template('user.html', name=name)
	varaiables
		Jinja2 recognizes variables of any type, even complex types such as lists, dictionaties and objects
			<p>A value from a dictionary: {{ mydict['key'] }}.</p>
			<p>A value from a list: {{ mylist[3] }}.</p>
			<p>A value from a list, with a variable index: {{ mylist[myintvar] }}.</p>
			<p>A value from an object's method: {{ myobj.somemethod() }}.</p>
		variables can be modified with filters
			which are added after the variable name with a pipe character as separator
				Hello, {{ name|capitalize }}
			commonly used filters
				safe		Renders the value without applying escaping
					using this, the HTML code will be interpreted
					never use this filter for untrusted code
				capitalize	Converts the first character of the value to uppercase and the rest to lowercase
				lower		Converts the value to lowercase characters
				upper		Converts the value to uppercase characters
				title		Capitalizes each word in the value
				trim		Removes leading and trailing whitespace from the value
				striptags	Removes any HTML tags from the value before rendering
	control structures
		to alter the flow of the template
		conditional statements
			{% if user %}
			    Hello, {{ user }}!
			{% else %}
			    Hello, Stranger!
			{% endif %}
		loop
			<ul>
			    {% for comment in comments %}
				<li>{{ comment }}</li>
			    {% endfor %}
			</ul>
		macros, similar to functions 
			{% macro render_comment(comment) %}
			    <li>{{ comment }}</li>
			{% endmacro %}

			<ul>
			    {% for comment in comments %}
				{{ render_comment(comment) }}
			    {% endfor %}
			</ul>
		store reusable macros in standalone files
			{% import 'macros.html' as macros %}
			<ul>
			    {% for comment in comments %}
				{{ macros.render_comment(comment) }}
			    {% endfor %}
			</ul>
		include a template to avoid repetition
			{% include 'common.html' %}
		template inheritance
			a base template, where the block tags define elements that a derived template can change
				<html>
				<head>
				    {% block head %}		# a block is to be changed
				    <title>{% block title %}{% endblock %} - My Application</title>
				    {% endblock %}
				</head>
				<body>
				    {% block body %}
				    {% endblock %}
				</body>
				</html>
			a derived template
				{% extends "base.html" %}
				{% block title %}Index{% endblock %}
				{% block head %}
				    {{ super() }}			to retain the original contents
				    <style>
				    </style>
				{% endblock %}
				{% block body %}
				<h1>Hello, World!</h1>
				{% endblock %}

3. Bootstrap   (checkout 3b)
	a open source client-side framework
	All the server needs to do is provide HTML responses that reference Bootstrap’s CSS and JavaScript files
		and instantiate the desired components through HTML, CSS, and JavaScript code
	you can use Bootstrap by modifying your templates, 
		or, Flask integrates it in flask-bootstrap
	use flask-bootstrap
		from flask.ext.bootstrap import Bootstrap
		# ...
		manager = Manager(app)
		bootstrap = Bootstrap(app)		# this is all you do
		
		@app.route('/')
		def index():
			return render_template('index.html')
		
		if __name__ == '__main__':
			manager.run()
	extend the bootstrap template
		{% extends "bootstrap/base.html" %}		# flask-bootstrap provides a base template with the basic layout of the page

		{% block title %}Flasky{% endblock %}

		{% block content %}
		<div class="container">
		    <div class="page-header">
			<h1>Hello, {{ name }}!</h1>
		    </div>
		</div>
		{% endblock %}
	Flask-Bootstrap’s base template blocks
		doc		The entire HTML document
		html_attribs	Attributes inside the <html> tag
		html		The contents of the <html> tag
		head		The contents of the <head> tag
		title		The contents of the <title> tag
		metas		The list of <meta> tags
		styles		Cascading stylesheet definitions
		body_attribs	Attributes inside the <body> tag
		body		The contents of the <body> tag
		navbar		User-defined navigation bar
		content		User-defined page content
		scripts		JavaScript declarations at the bottom of the document
	your own base template
		in a website, things like navigating bars are usually consistent among pages
		you can create your own base template based on flask-bootstrap's base template
		templates/base.html
			{% extends "bootstrap/base.html" %}

			{% block title %}Flasky{% endblock %}

			{% block navbar %}
			<div class="navbar navbar-inverse" role="navigation">
			    <div class="container">
				<div class="navbar-header">
				    <button type="button" class="navbar-toggle"
				     data-toggle="collapse" data-target=".navbar-collapse">
					<span class="sr-only">Toggle navigation</span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				    </button>
				    <a class="navbar-brand" href="/">Flasky</a>
				</div>
				<div class="navbar-collapse collapse">
				    <ul class="nav navbar-nav">
					<li><a href="/">Home</a></li>
				    </ul>
				</div>
			    </div>
			</div>
			{% endblock %}

			{% block content %}
			<div class="container">
			    {% block page_content %}{% endblock %}
			</div>
			{% endblock %}




