1. something about git
	git clone https://github.com/miguelgrinberg/flasky.git		// copy to the current local directory
	git checkout 1a			// check out a history commit tagged 1a
	git reset --hard		// destroy local changes, revert the files to their original state
	
	git fetch --all			// update the local commit history and the tags
	git fetch --tags		// but the actual source files are not affected
	git reset --hard origin/matser	// use this to actually update the files

	git diff 2a 2b			// show the differences

	git commit -m "comments"
	git commit -a -m ""	// add all the files into the stage and then commit

	git pull origin matser
	git push origin master

	git init

	git add *.txt

	git remote add origin git@github.com:XXX/XXX.git

2. virtual environment for python
	what is it
		a private copy of the Python interpreter onto which you can install packages privately, 
			without affecting the global Python interpreter installed in your system.
		Creating a virtual environment for each application ensures that applications have access to only the packages that they use, 
			while the global interpreter remains neat and clean and serves only as a source from which more virtual environments can be created
	tools
		virtualenv
		pyvenv for python 3.4 and up
	to use virtualenv
		create
			virtualenv venv			// create a virtual environment named venv, which will create a venv folder on the current directory
			virtualenv -p python3 venv	// use python3 when both 2 and 3 exist
		activate
			source venv/bin/activate	// bash
			venv\Scripts\activate		// Windows
		deactivate
			deactivate
	
2.basic application structure
	Flask -small, extensible
	initialization
		a Flask app must create an application instance
		The web server passes all requests it receives from clients to this object for handling, using a protocol called Web Server Gateway Interface (WSGI)
		it's an object of class Flask
			from flask import Flask
			app = Flask(__name__)		# the argument is the name of the main module or package of the app
							# usually, Python's __name__ variable is correct
	routes and view functions
		The application instance needs to know what code needs to run for each URL requested
			 The association between a URL and the function that handles it is called a route.
		to register the function as a route, we use the app.route decorator exposed by the application instance
			@app.route('/')			# '/' means root URL
			def index():			# the return value is called the response, is what client receives
				return '<h1>Hello World!</h1>'
							# functions like this are called view functions
		routes with dynamic URL component
			@app.route('/user/<name>')
			def user(name):
				return '<h1>Hello, %s!</h1>' % name
			# the dynamic components are strings by default, but type can be specified by <int:id>
			# int, float, path are supported
			# path is also a string, but does not consider slashes as separators and instead considers them part of the dynamic component
	server startup
		the run method of the application instance will launch Flask's integrated development web server
			if __name__ == '__main__':	# ensure the server is started only when the script is executed directly
				app.run(debug=True)	# if the script is imported by another script, it is assumed that the parent script will launch a different server
			# once starts up, it goes into a loop that waits for requests and services them
	for now, the code is:
		from flask import Flask
		app = Flask(__name__)

		@app.route('/')
		def index():
		    return '<h1>Hello World!</h1>'

		@app.route('/user/<name>')
		def user(name):
		    return '<h1>Hello, %s!</h1>' % name

		if __name__ == '__main__':
		    app.run(debug=True)
	
2. the request-response cycle
	request contexts
		why contexts
			when a request occurs, the view functions should have access to several objects, e.g., the request object, which encapsulates the HTTP request
			instead of passing them by parameters to the view functions, which will make it complicated and redundant
				Flask uses contexts to temporarily make certain objects globally accessible
			it's not actually global
				contexts make them accessible to thread without interfering with the other thread
		two contexts
			current_app	Application context	The application instance for the active application.
			g		Application context	An object that the application can use for temporary storage during the handling of a request. 
								This variable is reset with each request.
			request		Request context		The request object, which encapsulates the contents of a HTTP request sent by the client.
			session		Request context		The user session, a dictionary that the application can use to store values that are “remembered” between requests.
		
		Flask activates (or pushes) the application and request contexts before dispatching a request 
			and then removes them when the request is handled
			if any of these variables are accessed without an active application or request context, an error is generated
		example
			from flask import request

			@app.route('/')
			def index():
			    user_agent = request.headers.get('User-Agent')
			    return '<p>Your browser is %s</p>' % user_agent

	request hooks
		to execute code before or after each request is processed, e.g., to create a database connection at the start each request
		Instead of duplicating the code that does this in every view function, you can register common function to do this
			before_first_request:	Register a function to run before the first request is handled.
			before_request:		Register a function to run before each request.
			after_request:		Register a function to run after each request, if no unhandled exceptions occurred.
			teardown_request:	Register a function to run after each request, even if unhandled exceptions occurred.
		A common pattern to share data between request hook functions and view functions is to use the g context global

	responses
		status code
			by default, Flask sends 200, which means success
			return a second value to indicate status code
				return '<h1>Bad Request</h1>', 400
			or return a Response object, which can have more message in it, such as cookies
				from flask import make_response

				@app.route('/')
				def index():
				    response = make_response('<h1>This document carries a cookie!</h1>')
				    response.set_cookie('answer', '42')
				    return response
		redirect
			return with a URL and a status code 302
			or use redirect method
				from flask import redirect

				@app.route('/')
				def index():
				    return redirect('http://www.example.com')
		abort
			abort does not return control back to the function that calls it but gives control back to the web server by raising an exception.
				if not user:
					abort(404)

3. Flask extensions  --take flask-script as an example
	flask-script allows you to pass configuration options is through command-line arguments
	intall it
	use it
		from flask.ext.script import Manager	# extensions specifically for Flask are exposed under flask.ext
		# ...
		manager = Manager(app)			# the initialization is common to many extensions: by passing the application instance	

		# ...

		if __name__ == '__main__':
		    manager.run()
	usage
		e.g., python hello.py runserver --host 0.0.0.0
		in this way, you allow other clients in the network to access your server
			by default, the localhost is the only one allow to connect to the server

